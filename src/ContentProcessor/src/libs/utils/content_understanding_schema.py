from __future__ import annotations

from typing import Dict, List, Tuple, Type

from pydantic import BaseModel, create_model


def build_content_understanding_schema(model: Type[BaseModel]) -> Dict[str, object]:
    """Generate a Content Understanding analyzer schema from a Pydantic model.

    Fields annotated with ``json_schema_extra={"generated": True}`` are ignored as
    these values are expected to be generated by GPT and not extracted by
    Content Understanding.
    """

    fields: List[Dict[str, object]] = []
    for name, field in model.model_fields.items():
        extra = field.json_schema_extra or {}
        if extra.get("generated"):
            # Skip fields that should be generated by GPT
            continue

        field_type = getattr(field.annotation, "__name__", "string")
        fields.append(
            {
                "name": name,
                "type": field_type,
                "description": field.description or "",
            }
        )

    return {
        "name": model.__name__,
        "description": model.__doc__ or "",
        "fields": fields,
    }


def get_generated_fields_model(model: Type[BaseModel]) -> Type[BaseModel]:
    """Create a Pydantic model containing only fields marked as generated.

    This model can be supplied to GPT so that only those fields are populated by
    the model, reducing the need to map fields that Content Understanding already
    extracts.
    """

    generated_fields: Dict[str, Tuple[object, None]] = {}
    for name, field in model.model_fields.items():
        extra = field.json_schema_extra or {}
        if extra.get("generated"):
            generated_fields[name] = (field.annotation, None)

    if not generated_fields:
        # If no fields are marked as generated, return an empty model so the call
        # still succeeds but no additional data is requested from GPT.
        return create_model(f"{model.__name__}Generated", __base__=BaseModel)

    return create_model(
        f"{model.__name__}Generated",
        __base__=BaseModel,
        **generated_fields,
    )
